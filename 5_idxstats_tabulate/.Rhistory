mitogenome == "Coleoptera_Mordellidae_COI" & run == "idx_meta_genomecov_EF" ~ 0.4,
mitogenome == "Coleoptera_Mordellidae_COI" & run == "idx_meta_genomecov_GH" ~ 0.4,
TRUE ~ inputDNA
)
)
env_design <- env_design %>%
mutate(
inputDNA = case_when(
mitogenome == "Coleoptera_Elateridae_COI" & run == "idx_meta_genomecov_AB" ~ 40,
mitogenome == "Coleoptera_Elateridae_COI" & run == "idx_meta_genomecov_A2B2" ~ 40,
mitogenome == "Coleoptera_Elateridae_COI" & run == "idx_meta_genomecov_EF" ~ 0.8,
mitogenome == "Coleoptera_Elateridae_COI" & run == "idx_meta_genomecov_GH" ~ 0.8,
TRUE ~ inputDNA
)
)
env_design <- env_design %>%
tidyr::spread(mitogenome, inputDNA) %>%
dplyr::select(sample, date, trap, run, lysis_buffer_proportion, spike1 = Lepidoptera_Bombycidae_Bombyx_mori_COI, spike2 = Coleoptera_Mordellidae_COI, spike3 = Coleoptera_Elateridae_COI) %>%
arrange(run, date, trap)
View(idx_meta_genomecov_ABA2B2EFGH_barcodes)
View(idx_meta_genomecov_ABA2B2EFGH_mitogenomes)
env_design <- idx_meta_genomecov_ABA2B2EFGH_barcodes %>%
dplyr::mutate(run = EI_RUN) %>%
dplyr::mutate(EI_RUN = str_remove(EI_RUN, "idx_meta_genomecov_")) %>%
dplyr::mutate(DateTrapRun = str_c(DateTrap, "_", EI_RUN)) %>%
dplyr::mutate(lysis_buffer_proportion = 1 / lysis_buffer_proportion) %>% # for downstream analysis
dplyr::select(sample = DateTrapRun, date = Date, trap = Trap, run, lysis_buffer_proportion, mitogenome, COI_Species) %>%
dplyr::filter(COI_Species == "COI_Spike") %>%
dplyr::select(-COI_Species)
View(env_design)
env_design <- env_design %>%
mutate(
inputDNA = case_when(
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" & run == "idx_meta_genomecov_AB" ~ 10,
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" & run == "idx_meta_genomecov_A2B2" ~ 10,
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" & run == "idx_meta_genomecov_EF" ~ 0.2,
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" & run == "idx_meta_genomecov_GH" ~ 0.2
)
)
env_design <- env_design %>%
mutate(
inputDNA = case_when(
mitogenome == "Coleoptera_Mordellidae_COI" & run == "idx_meta_genomecov_AB" ~ 20,
mitogenome == "Coleoptera_Mordellidae_COI" & run == "idx_meta_genomecov_A2B2" ~ 20,
mitogenome == "Coleoptera_Mordellidae_COI" & run == "idx_meta_genomecov_EF" ~ 0.4,
mitogenome == "Coleoptera_Mordellidae_COI" & run == "idx_meta_genomecov_GH" ~ 0.4,
TRUE ~ inputDNA
)
)
env_design <- env_design %>%
mutate(
inputDNA = case_when(
mitogenome == "Coleoptera_Elateridae_COI" & run == "idx_meta_genomecov_AB" ~ 40,
mitogenome == "Coleoptera_Elateridae_COI" & run == "idx_meta_genomecov_A2B2" ~ 40,
mitogenome == "Coleoptera_Elateridae_COI" & run == "idx_meta_genomecov_EF" ~ 0.8,
mitogenome == "Coleoptera_Elateridae_COI" & run == "idx_meta_genomecov_GH" ~ 0.8,
TRUE ~ inputDNA
)
)
env_design <- env_design %>%
tidyr::spread(mitogenome, inputDNA) %>%
dplyr::select(sample, date, trap, run, lysis_buffer_proportion, spike1 = Lepidoptera_Bombycidae_Bombyx_mori_COI, spike2 = Coleoptera_Mordellidae_COI, spike3 = Coleoptera_Elateridae_COI) %>%
arrange(run, date, trap)
names(env_design)
env_seq_depth <- idx_meta_genomecov_ABA2B2EFGH_barcodes %>%
dplyr::mutate(run = EI_RUN) %>%
dplyr::mutate(EI_RUN = str_remove(EI_RUN, "idx_meta_genomecov_")) %>%
dplyr::mutate(DateTrapRun = str_c(DateTrap, "_", EI_RUN)) %>%
dplyr::select(DateTrapRun, sample) %>%
distinct(DateTrapRun, .keep_all = TRUE)
env_seq_depth <- left_join(env_seq_depth, fastq_read_counts_PlatesABA2B2EFGH) %>%
dplyr::select(-sample) %>%
dplyr::select(sample = DateTrapRun, mitogenome_seqs = tot_num_seqs) %>%
arrange(sample)
env_data_mitogenome <- idx_meta_genomecov_ABA2B2EFGH_mitogenomes %>%
dplyr::mutate(run = EI_RUN) %>%
dplyr::mutate(EI_RUN = str_remove(EI_RUN, "idx_meta_genomecov_")) %>%
dplyr::mutate(DateTrapRun = str_c(DateTrap, "_", EI_RUN)) %>%
dplyr::select(DateTrapRun, mitogenome, PC, mapped_reads, COI_Species)
env_data_mitogenome <- left_join(env_data_mitogenome, species) # this will generate extra Order.y, Family.y, Genus.y columns from the species dataframe. We ignore them
env_data_mitogenome <- env_data_mitogenome %>%
dplyr::select(sample = DateTrapRun, sp, PC, mapped_reads, mitogenome, COI_Species)
spikes # table of COI_spike species, to refer to for the code below
View(env_data_mitogenome)
# add spike1,2,3 to sp column
env_data_mitogenome <- env_data_mitogenome %>%
mutate(
sp = case_when(
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" ~ "spike1",
mitogenome == "Coleoptera_Mordellidae_COI" ~ "spike2",
mitogenome == "Coleoptera_Elateridae_COI" ~ "spike3",
TRUE ~ as.character(sp)
)
)
env_data_mitogenome <- idx_meta_genomecov_ABA2B2EFGH_mitogenomes %>%
dplyr::mutate(run = EI_RUN) %>%
dplyr::mutate(EI_RUN = str_remove(EI_RUN, "idx_meta_genomecov_")) %>%
dplyr::mutate(DateTrapRun = str_c(DateTrap, "_", EI_RUN)) %>%
dplyr::select(DateTrapRun, mitogenome, PC, mapped_reads, COI_Species)
env_data_mitogenome <- left_join(env_data_mitogenome, species) # this will generate extra Order.y, Family.y, Genus.y columns from the species dataframe. We ignore them
env_data_mitogenome <- env_data_mitogenome %>%
dplyr::select(sample = DateTrapRun, sp, PC, mapped_reads, mitogenome, COI_Species)
spikes # table of COI_spike species, to refer to for the code below
# add spike1,2,3 to sp column
env_data_mitogenome <- env_data_mitogenome %>%
mutate(
sp = case_when(
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" ~ "spike1",
mitogenome == "Coleoptera_Mordellidae_COI" ~ "spike2",
mitogenome == "Coleoptera_Elateridae_COI" ~ "spike3",
TRUE ~ as.character(sp)
)
)
env_data_mitogenome <- env_data_mitogenome %>%
dplyr::filter(mapped_reads > 0) %>%
dplyr::select(sample, sp, PC, mapped_reads)
env_data_mitogenome_test <- env_data_mitogenome %>%
mutate(
PC = case_when(
sp == "spike1" ~ NULL,
sp == "spike2" ~ NULL,
sp == "spike3" ~ NULL,
TRUE ~ PC
)
)
env_data_mitogenome_test <- env_data_mitogenome %>%
mutate(
PC = case_when(
sp == "spike1" ~ NA,
sp == "spike2" ~ NA,
sp == "spike3" ~ NA,
TRUE ~ PC
)
)
env_data_mitogenome_test <- env_data_mitogenome %>%
mutate(
PC = case_when(
sp == "spike1" ~ "NA",
sp == "spike2" ~ "NA",
sp == "spike3" ~ "NA",
TRUE ~ PC
)
)
env_data_mitogenome_test <- env_data_mitogenome %>%
mutate(
PC = case_when(
sp == "spike1" ~ "something",
sp == "spike2" ~ "something",
sp == "spike3" ~ "something",
TRUE ~ PC
)
)
env_data_mitogenome_test <- env_data_mitogenome %>%
mutate(
PC = case_when(
sp == "spike1" ~ 0,
sp == "spike2" ~ 0,
sp == "spike3" ~ 0,
TRUE ~ PC
)
)
View(env_data_mitogenome_test)
env_data_mitogenome_test <- env_data_mitogenome %>%
mutate(
PC = case_when(
sp == "spike1" ~ NA_real_,
sp == "spike2" ~ NA_real_,
sp == "spike3" ~ NA_real_,
TRUE ~ PC
)
)
env_data_mitogenome <- env_data_mitogenome %>%
mutate(
PC = case_when(
sp == "spike1" ~ NA_real_,
sp == "spike2" ~ NA_real_,
sp == "spike3" ~ NA_real_,
TRUE ~ PC
)
)
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
str_detect("aecfg", letters)
letters
env_data_COI <- idx_meta_genomecov_ABA2B2EFGH_barcodes %>%
dplyr::mutate(run = EI_RUN) %>%
dplyr::mutate(EI_RUN = str_remove(EI_RUN, "idx_meta_genomecov_")) %>%
dplyr::mutate(DateTrapRun = str_c(DateTrap, "_", EI_RUN)) %>%
dplyr::select(DateTrapRun, mitogenome, PC, mapped_reads, COI_Species)
env_data_COI <- left_join(env_data_COI, species, by = c("mitogenome" = "COI")) # this will generate extra Order.y, Family.y, Genus.y columns from the species dataframe. We ignore them
env_data_COI <- env_data_COI %>%
dplyr::select(sample = DateTrapRun, sp, PC, mapped_reads, mitogenome, COI_Species)
spikes # table of COI_spike species, to refer to for the code below
# add spike1,2,3 to sp column
env_data_COI <- env_data_COI %>%
mutate(
sp = case_when(
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" ~ "spike1",
mitogenome == "Coleoptera_Mordellidae_COI" ~ "spike2",
mitogenome == "Coleoptera_Elateridae_COI" ~ "spike3",
TRUE ~ as.character(sp)
)
)
env_data_COI <- env_data_COI %>%
dplyr::filter(mapped_reads > 0) %>%
dplyr::select(sample, sp, PC, mapped_reads)
View(env_data_COI)
rm(env_data_mitogenome_test)
env_data_COI <- env_data_COI %>%
mutate(
PC = case_when(
sp == "spike1" ~ NA_real_,
sp == "spike2" ~ NA_real_,
sp == "spike3" ~ NA_real_,
TRUE ~ PC
)
)
barcodesoutputidxstatstabulatefolder <- "../../PlatesABA2B2EFGH/minimap2_406barcodes_20190116"
mitogenomesoutputidxstatstabulatefolder <- "../../PlatesABA2B2EFGH/minimap2_308mitogenomes_20190115"
mocks_idx_meta_genomecov_EFGH_barcodes <- read_delim(file.path(barcodesoutputidxstatstabulatefolder, "mocks_idx_meta_genomecov_EFGH_minimap2_20190116_406barcodes.txt"), delim = "\t", escape_double = FALSE, trim_ws = TRUE)
mocks_idx_meta_genomecov_EFGH_mitogenomes <- read_delim(file.path(mitogenomesoutputidxstatstabulatefolder, "mocks_idx_meta_genomecov_EFGH_minimap2_20190115_308mitogenomes.txt"), delim = "\t", escape_double = FALSE, trim_ws = TRUE)
mocks_idx_meta_genomecov_EFGH_barcodes <-  mocks_idx_meta_genomecov_EFGH_barcodes %>%
mutate(
sample = case_when(
sample == "PlateGH_COI_1_negative_control" ~ "PlateGH_negative_control_1",
sample == "PlateGH_COI_2_negative_control" ~ "PlateGH_negative_control_2",
TRUE ~ as.character(sample)
)
)
mocks_idx_meta_genomecov_EFGH_barcodes$sample %>% unique()
mocks_idx_meta_genomecov_EFGH_mitogenomes <-  mocks_idx_meta_genomecov_EFGH_mitogenomes %>%
mutate(
sample = case_when(
sample == "PlateGH_COI_1_negative_control" ~ "PlateGH_negative_control_1",
sample == "PlateGH_COI_2_negative_control" ~ "PlateGH_negative_control_2",
TRUE ~ as.character(sample)
)
)
mocks_idx_meta_genomecov_EFGH_mitogenomes$sample %>% unique()
mock_design <- left_join(mocks_idx_meta_genomecov_EFGH_barcodes, species, by = c("mitogenome" = "COI")) # I can use either the barcodes or mitogenomes dataset
spikes # table of COI_spike species, to refer to for the code below
# add spike1,2,3 to sp column
mock_design <- mock_design %>%
mutate(
sp = case_when(
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" ~ "spike1",
mitogenome == "Coleoptera_Mordellidae_COI" ~ "spike2",
mitogenome == "Coleoptera_Elateridae_COI" ~ "spike3",
TRUE ~ as.character(sp)
)
)
mock_design <- mock_design %>%
dplyr::select(sample, plate, experiment, run, input_amount, input_sp = sp) %>%
dplyr::filter(input_amount > 0) %>%
arrange(experiment, plate, sample, run)
names(mocks_idx_meta_genomecov_EFGH_mitogenomes)
mock_data_mitogenome <- left_join(mocks_idx_meta_genomecov_EFGH_mitogenomes, species, by = c("mitogenome" = "mitogenome"))
spikes # table of COI_spike species, to refer to for the code below
# add spike1,2,3 to sp column
mock_data_mitogenome <- mock_data_mitogenome %>%
mutate(
sp = case_when(
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" ~ "spike1",
mitogenome == "Coleoptera_Mordellidae_COI" ~ "spike2",
mitogenome == "Coleoptera_Elateridae_COI" ~ "spike3",
TRUE ~ as.character(sp)
)
)
mock_data_mitogenome <- mock_data_mitogenome %>%
dplyr::select(sample, plate, experiment, run, sp, PC, mapped_reads) %>%
arrange(experiment, plate, sample, run)
names(mocks_idx_meta_genomecov_EFGH_barcodes)
mock_data_COI <- left_join(mocks_idx_meta_genomecov_EFGH_barcodes, species, by = c("mitogenome" = "COI"))
spikes # table of COI_spike species, to refer to for the code below
# add spike1,2,3 to sp column
mock_data_COI <- mock_data_COI %>%
mutate(
sp = case_when(
mitogenome == "Lepidoptera_Bombycidae_Bombyx_mori_COI" ~ "spike1",
mitogenome == "Coleoptera_Mordellidae_COI" ~ "spike2",
mitogenome == "Coleoptera_Elateridae_COI" ~ "spike3",
TRUE ~ as.character(sp)
)
)
mock_data_COI <- mock_data_COI %>%
dplyr::select(sample, plate, experiment, run, sp, PC, mapped_reads) %>%
arrange(experiment, plate, sample, run)
names(mocks_idx_meta_genomecov_EFGH_barcodes)
mock_seq_depth <- mocks_idx_meta_genomecov_EFGH_barcodes %>%
dplyr::select(sample, plate_well) %>%
distinct(sample, .keep_all = TRUE) %>%
arrange(sample)
mock_seq_depth <- left_join(mock_seq_depth, fastq_read_counts_PlatesABA2B2EFGH, by = c("plate_well" = "sample")) %>%
dplyr::select(-plate_well, mitogenome_seqs = tot_num_seqs) %>%
arrange(sample)
setwd("~/Dropbox/Working_docs/Roslin_Greenland/2018/manuscript_methods/20190120_Ecoletts/Rcode/Rdata")
getwd()
save(species, spikes, mock_design, mock_data_mitogenome, mock_data_COI,
env_design, env_data_mitogenome, env_data_COI, mock_seq_depth, env_seq_depth,
file = "input_data_step5_20190124.RData")
library(tidyverse)
library(lubridate)
library(sjmisc)
localDir = "Rdata"
# load(file.path(localDir, "input_data_step5.RData"))
load(file.path(localDir, "input_data_step5_20190124.RData"))
localDir = "Rdata"
# load(file.path(localDir, "input_data_step5.RData"))
load(file.path(localDir, "input_data_step5_20190124.RData"))
setwd("~/Dropbox/Working_docs/Roslin_Greenland/2018/manuscript_methods/20190120_Ecoletts/Rcode")
# setwd("~/Dropbox/Working_docs/Roslin_Greenland/2018/manuscript_methods/20190109/Rcode")
localDir = "."
dataDir = file.path(localDir, "Rdata")
# load(file.path(localDir, "input_data_step5.RData"))
load(file.path(localDir, "input_data_step5_20190124.RData"))
# load(file.path(localDir, "input_data_step5.RData"))
load(file.path(dataDir, "input_data_step5_20190124.RData"))
View(mock_design)
View(env_design)
env_design <- env_design %>%
unite("trap_week", c("date", "trap"), remove = FALSE) # create trap_week column
View(env_design)
mock_design %>% count(sample)
species %>%
summarise_at(vars(mt_length, COI_length), funs(mean(.), median(.), max(.), min(.)), na.rm = TRUE)
lengths <- species %>%
summarise_at(vars(mt_length, COI_length), funs(mean(.), median(.), max(.), min(.)), na.rm = TRUE)
View(lengths)
str_c(round(mean(species$COI_length, na.rm = TRUE) / mean(species$mt_length, na.rm = TRUE) * 100, 3), "%")
## there are 493 unique values of trap_week
# Otso's method
TD = data.frame(trap = env_design$trap, date = env_design$date)
TD = unique(TD) # 493
# Doug's method
dplyr::n_distinct(env_design$trap_week) # 493
# base R
length(unique(env_design$trap_week)) # 493 # base R
## adding some columns:  year and month
env_design <- env_design %>%
dplyr::mutate(year = year(date))
env_design <- env_design %>%
dplyr::mutate(month = month(date))
## if i make a table, i recover Table S4.2
# flat_table in sjmisc
env_design %>%
select(year, run) %>%
sjmisc::flat_table()
# table in Base R
with(env_design, table(Year = year, Run = run, useNA = "no")) # base R
with(env_design, table(Year = year, Run = run, useNA = "always")) # base R
subdata <- env_design %>%
dplyr::filter(year == "1998" & run == "idx_meta_genomecov_AB")
View(subdata)
View(env_data_COI)
View(env_design)
env_design %>%
dplyr::group_by(year) %>%
# dplyr::filter(year == "1998") %>%
dplyr::select(month, trap, run) %>%
sjmisc::flat_table()
env_data_target <- env_data_COI %>%  # use env_data_mitogenome or env_data_COI
mutate(
arcdynmock = case_when(
str_detect(sp, "sp\\d") ~ "mocksp", # look for sp1, sp2, sp3, ..., sp20.  \\d is one digit
str_detect(sp, "spike") ~ "spike"   # look for spike1, spike2, spike3
)
)
# sum mapped_reads by sample and whether it's input spp or spike spp
env_data_target_summ <- env_data_target %>%
group_by(sample, arcdynmock) %>%
summarise_at(vars(mapped_reads), funs(sum(.))) %>%
arrange(sample)
# make a wide table
env_data_target_summ <- env_data_target_summ %>%
tidyr::spread(arcdynmock, mapped_reads)
# left_join with env_seq_depth
env_data_target_summ <- left_join(env_data_target_summ, env_seq_depth, by = c("sample" = "sample")) %>%
select(sample, total_seqs = mitogenome_seqs, spike, mocksp)
# calculate percentages of mock species and spike species reads in total reads
env_data_target_summ <- env_data_target_summ %>%
mutate(
spike_pct = spike/total_seqs,
mocksp_pct = mocksp/total_seqs,
mocksp_pct_nospike = mocksp/(total_seqs - spike)
)
env_data_target_summ <- env_data_target_summ %>%
ungroup() %>%
mutate_at("sample", str_remove, "Date_\\d+_\\d+_\\d+_Trap[ABC]_") %>% # remove substring before RUN, e.g. Date_2012_07_08_TrapC from Date_2012_07_08_TrapC_AB
dplyr::rename(run = sample) %>%
group_by(run) %>%
summarise_at(vars(spike_pct, mocksp_pct, mocksp_pct_nospike), funs(mean(.), median(.), max(.), min(.)))
View(env_data_target_summ)
View(env_data_target)
# make new column in env_data_mitogenome to differentiate mock species inputs from spike species
env_data_target <- env_data_mitogenome %>%  # use env_data_mitogenome or env_data_COI
mutate(
arcdynmock = case_when(
str_detect(sp, "sp\\d") ~ "mocksp", # look for sp1, sp2, sp3, ..., sp20.  \\d is one digit
str_detect(sp, "spike") ~ "spike"   # look for spike1, spike2, spike3
)
)
# sum mapped_reads by sample and whether it's input spp or spike spp
env_data_target_summ <- env_data_target %>%
group_by(sample, arcdynmock) %>%
summarise_at(vars(mapped_reads), funs(sum(.))) %>%
arrange(sample)
# make a wide table
env_data_target_summ <- env_data_target_summ %>%
tidyr::spread(arcdynmock, mapped_reads)
# left_join with env_seq_depth
env_data_target_summ <- left_join(env_data_target_summ, env_seq_depth, by = c("sample" = "sample")) %>%
select(sample, total_seqs = mitogenome_seqs, spike, mocksp)
# calculate percentages of mock species and spike species reads in total reads
env_data_target_summ <- env_data_target_summ %>%
mutate(
spike_pct = spike/total_seqs,
mocksp_pct = mocksp/total_seqs,
mocksp_pct_nospike = mocksp/(total_seqs - spike)
)
env_data_target_summ <- env_data_target_summ %>%
ungroup() %>%
mutate_at("sample", str_remove, "Date_\\d+_\\d+_\\d+_Trap[ABC]_") %>% # remove substring before RUN, e.g. Date_2012_07_08_TrapC from Date_2012_07_08_TrapC_AB
dplyr::rename(run = sample) %>%
group_by(run) %>%
summarise_at(vars(spike_pct, mocksp_pct, mocksp_pct_nospike), funs(mean(.), median(.), max(.), min(.)))
View(env_data_target_summ)
setwd("~/Dropbox/Working_docs/Roslin_Greenland/2018/manuscript_methods/20190124_Ecoletts/Rcode")
# SET DIRECTORIES AND LOAD DATA (START) #####################################
# setwd("D:/HY-data/OVASKAIN/all stuff/manuscripts/InPreparation/Tomas Greenland Methods")
# setwd("~/Dropbox/Working_docs/Roslin_Greenland/2018/manuscript_methods/20190120_Ecoletts/Rcode/")
localDir = "."
dataDir = file.path(localDir, "Rdata")
# load(file.path(dataDir, "old_20181223_1", "input_data_step5_20181223.1.RData")) # original version of data tables used in the writing of the first draft of the manuscript
# load(file.path(dataDir, "input_data_step5_20190120.RData")) # new version of data tables after re-running all steps of the pipeline, to confirm reproducibility and to make a cleaner dataset for uploading.
load(file.path(dataDir, "input_data_step5_20190124.1.RData")) # new version of data tables after re-writing the pipeline to generate the data files directly from the idxstats and genomecov files
View(mock_design)
install.packages(c("BayesianTools", "DHARMa", "e1071", "emmeans", "iNEXT", "natserv", "TH.data"))
library(tidyverse)
library(modelr)
options(na.action = na.warn)
# a simple model
ggplot(sim1, aes(x, y)) +
geom_point()
sim1
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
View(models)
ggplot(sim1, aes(x, y)) +
geom_abline(
aes(intercept = a1, slope = a2), data = models, alpha = 1/4
) +
geom_point()
a[1] + data$x + a[2]
model1 <- function(a, data){
a[1] + data$x + a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data){
diff <- data$y - model1(mod, data)data
sqrt(mean(diff^2))
}
measure_distance(c(7, 1.5), sim1)
measure_distance <- function(mod, data){
diff <- data$y - model1(mod, data)data
sqrt(mean(diff^2))
}
measure_distance <- function(mod, data){
diff <- data$y - model1(mod, data)
sqrt(mean(diff^2))
}
measure_distance(c(7, 1.5), sim1)
model1(c(7, 1.5), sim1)  # generates a bunch of y's for a given intercept a[1] and slope a[2], and the x values in sim1
model1 <- function(a, data){
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)  # generates a bunch of y's for a given intercept a[1] and slope a[2], and the x values in sim1
measure_distance <- function(mod, data){
diff <- data$y - model1(mod, data)
sqrt(mean(diff^2))
}
measure_distance(c(7, 1.5), sim1)
measure_distance(c(a1, a2), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
View(models)
# apply sim1_dist function to
models <- dplyr::select(-dist)
# apply sim1_dist function to
models <- models %>%  dplyr::select(-dist)
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(
aes(intercept = a2, slope = a2, color = -dist),
data = filter(models, rank(dist) <= 10)
)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, color = -dist),
data = filter(models, rank(dist) <= 10)
)
