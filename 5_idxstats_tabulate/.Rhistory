samplemetadata$lysis_buffer_proportion <- round(samplemetadata$lysis_buffer_proportion, 2) # round to 2 decimal places
idx_meta <- left_join(idx, samplemetadata) # R message:  "Joining, by = c("sample", "well")"
# use tidyr::separate to parse out metadata from Short_name_of_the_sample
idx_meta <- idx_meta %>%
tidyr::separate(Short_name_of_the_sample, c("Year", "Plot", "Trap", "Week"), sep = "_", remove = TRUE)
# sort columns, remove useless columns
idx_meta <- idx_meta %>%
dplyr::select(Date, Plot, Trap, Week, everything()) %>%
dplyr::select(-row, -column, -sample_reference, -species_name, -barcode_used, -Sample_type, -x.260_230_ratio, -x.260_280_ratio, -Quantification_method, -Buffer_used, -pathname, -TGAC_barcode, -Extraction_kit_protocol) %>%
dplyr::arrange(Date, Trap)
names(idx_meta)
#  [1] "Date"                       "Plot"                       "Trap"
#  [4] "Week"                       "mitogenome"                 "mt_length"
#  [7] "mapped_reads"               "sample"                     "well"
# [10] "samtools_filter"            "Full_name_of_the_sample"    "Year"
# [13] "Sample_alias"               "ArcDyn_Plate_name"          "EI_Plate_name"
# [16] "Concentration_ng_per_ul"    "Sample_volume_ul"           "lysis_buffer_orig_total_ul"
# [19] "lysis_buffer_purified_ul"   "lysis_buffer_proportion"
idx_meta %>% distinct(Date) %>% count()  # number of distinct values of Date:  70
idx_meta %>% distinct(Plot) %>% count()  # number of distinct values of Plot:  should be 1
idx_meta %>% distinct(Trap) %>% count()  # number of distinct values of Trap:  should be 3 (A,B,C)
idx_meta %>% distinct(Week) %>% count()  # number of distinct values of Week:  18
idx_meta %>% distinct(mitogenome) %>% count()  # number of distinct values of mitogenome:  311 == 308 + 3;  barcodes:  barcodes:  409 == 406 + 3 COI spikes
idx_meta %>% distinct(sample) %>% count()  # number of distinct values of sample:   192 (192 is the number of input idx files)
idx_meta %>% distinct(sample)
idx_meta %>% distinct(Sample_alias) %>% count()  # number of distinct values of Sample_alias:  should be = sample = 192
idx_meta %>% distinct(Sample_alias)
idx_meta %>% distinct(well) %>% count()  # number of distinct values of well:  96
idx_meta %>% distinct(ArcDyn_Plate_name) %>% count()  # number of distinct values of ArcDyn_Plate_name:  should be 2
idx_meta %>% distinct(samtools_filter) %>% count()  # number of distinct values of samtools_filter: should be 1
idx_meta %>% distinct(samtools_filter)   # should only have samtools filter information:  e.g. F2308_f0x2_q1
idx_meta %>% distinct(Full_name_of_the_sample) %>% count()  # number of distinct values of Full_name_of_the_sample: should be 192
idx_meta %>% distinct(Full_name_of_the_sample) %>% arrange(Full_name_of_the_sample)
cat("Pattern search is for: ", genomecovfile)
genomecov_files <- list.files(Sys.glob(file.path(idxstatsgenomecovfolder)), pattern = genomecovfile, full.names = TRUE)
head(genomecov_files); cat("    ", length(genomecov_files), "total files")
# column names of genomecov_files
columnnames <- c("mitogenome", "position", "coverage")
# function to read_tsv the file
loadFile2 <- function(x) {
df <- read_tsv(gzfile(x),
# e.g. "minimap2_all_outputs_PlatesAB/Sample_IPO3916_A1_F2308_f0x2_q1_sorted_genomecov_d.txt.gz"
col_names = columnnames, na = "NA",
# col_types = cols(
#     mitogenome = col_character(),
#     position = col_integer(),
#     coverage = col_integer()),
trim_ws = TRUE
)
# read in filename, extract and sub in the first bit of the name, remove any filepaths (using basename) and store in df$sample.  example filename:  Sample_IPO3916_A1_F2308_f0x2_q1_sorted_genomecov_d.txt.gz
df$sample <- sub("Sample_([A-Z,a-f,0-9]+_\\D\\d+)_[\\w]+_sorted_genomecov_d.txt.gz", "\\1", basename(x), perl=TRUE)
# \\w any letter, digit, underscore
# \\D any non-digit, \\d any digit
df$well <- sub("Sample_[A-Z,a-f,0-9]+_(\\D\\d+)_[\\w]+_sorted_genomecov_d.txt.gz", "\\1", basename(x), perl=TRUE)
# extract well number from filename
# \\w any letter, digit, underscore
df$samtools_filter <- sub("Sample_[\\w]+_(F[\\w]+)_sorted_genomecov_d.txt.gz", "\\1", basename(x), perl=TRUE)
# extract samtools parameters from filename
df$pathname_genomecov <- x
# store full pathname in df$pathname
df <- df %>% dplyr::group_by(mitogenome) %>%
summarise(sum_coverage = sum(coverage),
mean_coverage = mean(coverage),
stddev = sd(coverage),
coefvar = sd(coverage)/mean(coverage),
length = n(),
pct_coverage = sum(coverage>0)/n(), # % of positions that have 1 or more reads mapped
sample = first(sample),
well = first(well),
samtools_filter = first(samtools_filter),
pathname_genomecov = first(pathname_genomecov)
)
# output is df
df
}
# this step requires ~30 minutes to run on mitogenomes, ~ 3 mins to run on barcodes
# lapply the loadFile2() function to all of the genomecov_files, save the output in genomecovfiles as a list
# map is equivalent to lapply
genomecoverages_summ <- purrr::map(genomecov_files, loadFile2); notify("Your loadfile2 function has finally finished!", "Message from R", speakIt=TRUE)
# rbind the list into a dataframe
genomecoverages_summ <- do.call(rbind, genomecoverages_summ)
# save files
# saveRDS(genomecoverages_summ, file.path(outputidxstatstabulatefolder, "genomecoverages_summ_PlatesAB_20190115_308mitogenomes.RDS", compress = TRUE))
# saveRDS(genomecoverages_summ, file.path(outputidxstatstabulatefolder, "genomecoverages_summ_PlatesAB_20190116_406barcodes.RDS", compress = TRUE))
saveRDS(genomecoverages_summ, file.path(outputidxstatstabulatefolder, "genomecoverages_summ_PlatesAB_20190202_349MITOCOICYTB.RDS"), compress = TRUE)
# left_join genomecoverages_summ to idx_meta
idx_meta_genomecov <- left_join(idx_meta, genomecoverages_summ) # R message:  Joining, by = c("mitogenome", "sample", "well", "samtools_filter")
idx_meta_genomecov <- idx_meta_genomecov %>% arrange(Date, Trap)
# use grepl() to find mitogenome names that are COI spike names
idx_meta_genomecov$COI_Species <- if_else(grepl("_COI$", idx_meta_genomecov$mitogenome), "COI_Spike", "ArcDyn_Species") # this regex works for both the mitogenome and barcode datasets
# reorder the columns for convenience
idx_meta_genomecov <- idx_meta_genomecov %>%
dplyr::select(Date:mitogenome, COI_Species, mapped_reads, everything())
# change the names of the spikes from an old naming convention to the one that we want to use
# must do this at this stage, after joining idxstats and genomecov files
idx_meta_genomecov <-  idx_meta_genomecov %>%
mutate(
mitogenome = case_when(
mitogenome == "1-2_Lepidoptera_Bombycidae_Bombyx_mori_10ng_COI" ~  "Lepidoptera_Bombycidae_Bombyx_mori_COI",
mitogenome == "1-2_Lepidoptera_Bombycidae_Bombyx_mori_COI" ~ "Lepidoptera_Bombycidae_Bombyx_mori_COI",
mitogenome == "3-1_Coleoptera_Mordellidae_20ng_COI" ~ "Coleoptera_Mordellidae_COI",
mitogenome == "3-1_Coleoptera_Mordellidae_COI" ~ "Coleoptera_Mordellidae_COI",
mitogenome == "2-1_Coleoptera_Elateridae_40ng_COI" ~ "Coleoptera_Elateridae_COI",
mitogenome == "2-1_Coleoptera_Elateridae_COI" ~ "Coleoptera_Elateridae_COI",
TRUE ~ as.character(mitogenome)
)
)
names(idx_meta_genomecov)
rm(genomecoverages_summ)
rm(idx)
rm(idx_meta)
rm(idx_mitogenome_table)
rm(lysisbufferdata)
rm(samplemetadata)
# calculate sum of all COI spike reads for each sample.
sum_idx_meta_genomecov <- idx_meta_genomecov %>%
group_by(Full_name_of_the_sample, COI_Species) %>%
summarise_at(vars(mapped_reads), funs(sum(as.numeric(.)))) %>%
arrange(desc(COI_Species), mapped_reads, Full_name_of_the_sample)
View(sum_idx_meta_genomecov)
# visual inspection reveals 1 sample that has very low COI_spike mapped reads. Remove it
sample_names <- sum_idx_meta_genomecov %>%
dplyr::filter(COI_Species == "COI_Spike" && mapped_reads < 600) %>%
dplyr::select(Full_name_of_the_sample) %>%
distinct(Full_name_of_the_sample)
samples_to_remove <- sample_names %>%
dplyr::pull(Full_name_of_the_sample) # pull out a single variable
samples_to_remove # 1 sample to remove
# [1] "1999JUL22_Art3_TrapC_Wk29"
idx_meta_genomecov <- idx_meta_genomecov %>%
filter(!Full_name_of_the_sample %in% samples_to_remove) # 59401 obs mitogenomes, 78119 obs barcodes
# sanity check:  191 samples, which is correct since i removed 1 sample
idx_meta_genomecov %>%
distinct(Full_name_of_the_sample) %>%
count()  # number of distinct values of Full_name_of_the_sample
# create variable from Date and Trap(ABC)
# stringr::str_pad(x, width = 2, side = "left", pad = "0")  # to ensure that the date always has two digits, e.g. 07.
idx_meta_genomecov$DateTrap <- str_c("Date", year(idx_meta_genomecov$Date), str_pad(month(idx_meta_genomecov$Date), 2, side = "left", pad = "0"), str_pad(day(idx_meta_genomecov$Date), 2, side = "left", pad = "0"), idx_meta_genomecov$Trap, sep = "_")
idx_meta_genomecov <- idx_meta_genomecov %>% select(DateTrap, everything())
# in coefvar column, replace "NaN" string to "NA" and then coerce column to numeric
idx_meta_genomecov$coefvar <- idx_meta_genomecov$coefvar %>%
str_replace("NaN", "NA") %>%
as.numeric()
# sanity checks
# these tables check that i only have one row for each Full_name_of_the_sample, DateTrap, and mitogenome
# ideally, there should be a 1 in all rows of column "n"
idxstats_by_Full_name_of_the_sample <- idx_meta_genomecov %>%
dplyr::group_by(DateTrap) %>%
dplyr::distinct(Full_name_of_the_sample) %>%
dplyr::count() %>%
dplyr::arrange(desc(n)); View(idxstats_by_Full_name_of_the_sample)
# ideally, there should be a 1 in all rows of column "n"
idxstats_by_DateTrap <- idx_meta_genomecov %>%
dplyr::group_by(Full_name_of_the_sample) %>%
dplyr::distinct(DateTrap) %>%
dplyr::count() %>%
dplyr::arrange(desc(n)); View(idxstats_by_DateTrap)
# ideally, there should be a 311 or 409 in all rows of column "n"
idxstats_by_mitogenome <- idx_meta_genomecov %>%
dplyr::group_by(Full_name_of_the_sample) %>%
dplyr::distinct(mitogenome) %>%
dplyr::count() %>%
dplyr::arrange(desc(n)); View(idxstats_by_mitogenome)
# write_tsv(idx_meta_genomecov, file.path(outputidxstatstabulatefolder, "idx_meta_genomecov_PlatesAB_20190115_308mitogenomes.txt")) # output file for merging with the other RUN outputs
# write_tsv(idx_meta_genomecov, file.path(outputidxstatstabulatefolder, "idx_meta_genomecov_PlatesAB_20190116_406barcodes.txt")) # output file for merging with the other RUN outputs
write_tsv(idx_meta_genomecov, file.path(outputidxstatstabulatefolder, "idx_meta_genomecov_PlatesAB_20190202_349MITOCOICYTB.txt")) # output file for merging with the other RUN outputs
# rm(list=ls())
library(tidyverse)
# ── Attaching packages ───────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──
# ✔ ggplot2 3.1.0     ✔ purrr   0.2.5
# ✔ tibble  2.0.1     ✔ dplyr   0.7.8
# ✔ tidyr   0.8.2     ✔ stringr 1.3.1
# ✔ readr   1.3.1     ✔ forcats 0.3.0
# ── Conflicts ──────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
# ✖ dplyr::filter() masks stats::filter()
# ✖ dplyr::lag()    masks stats::lag()
library(readxl)
library(lubridate)
library(knitr)
library(beepr)
library(hablar)
sessionInfo()
# function to allow macOS system notifications at end of a long command
notify <- function(msgString='Message from R', titleString='Message from R', speakIt=FALSE) {
cmd <- paste('terminal-notifier -message ', '"', msgString, '"  -title "', titleString, '"', sep='')
system(cmd)
if (speakIt) {
system(paste('say', msgString))
}
}
# setwd("~/Dropbox/Working_docs/Roslin_Greenland/2017/bulk_samples/PlatesEF")
setwd("../../PlatesEF") # go to folder with samtools/bedtools outputs
getwd()
samtoolsfilter <- "F2308_f0x2" # f0x2 is for PROPER PAIR, there are also samtools outputs for F2308 only
samtoolsqual <- "q48"
# use this version for 349 mitogenomes&COI_CYTB sequences
idxstatsgenomecovfolder <- paste0("outputs_PlatesEF_", samtoolsfilter, "_", samtoolsqual, "_minimap2_outputs_20190202_349MITOCOICYTB")  # this is the enclosing folder around the idxstats and genomcov files for a given set of soups
# outputs_PlatesEF_F2308_f0x2_q48_minimap2_outputs_20190202_349MITOCOICYTB
# this is where i store the outputs of this script
outputidxstatstabulatefolder <- "EF_outputs_20190202_F2308_f0x2_q48_minimap2_349MITOCOICYTB"
idxstatsfile <- paste0("*", samtoolsfilter, "_", samtoolsqual, "_sorted.bam_idxstats\\.txt")
genomecovfile <- paste0("*", samtoolsfilter, "_", samtoolsqual, "_sorted_genomecov_d\\.txt\\.gz")
samplemetadatafolder <- "~/Dropbox/Working_docs/Roslin_Greenland/2017/bulk_samples/ArcDyn_scripts/6_referenceseqs_metadata/PlatesEF_metadata"  # this is the enclosing folder around the sample metadata spreadsheet
samplemetadatafilename <- "Samples_for_sequencing_Zack_collection_Nov_2016_DY_TH_17_Feb_2017.xlsx"
lysisbufferfilename <- "lysis_buffer_EF.xlsx"  # this is based on Yinqiu's lysis buffer datasheet, which i edited a bit to make the sample names consistent so that tables could be joined via "Short_name_of_the_sample".  Also, i replaced missing data or cells with notes with NA
cat("idxstatsgenomecoverfolder is: ", idxstatsgenomecovfolder)
cat("idxstatsfile search pattern is: ", idxstatsfile)
# idx_files <- list.files(Sys.glob(file.path(idxstatsgenomecovfolder, "BWA??", folder2)), pattern = idxstatsfile, full.names = TRUE) # old version
idx_files <- list.files(Sys.glob(file.path(idxstatsgenomecovfolder)), pattern = idxstatsfile, full.names = TRUE)
head(idx_files); cat("    ", length(idx_files), "total files")
setwd("~/Dropbox/Working_docs/Roslin_Greenland/2017/bulk_samples/PlatesEF")
samtoolsfilter <- "F2308_f0x2" # f0x2 is for PROPER PAIR, there are also samtools outputs for F2308 only
samtoolsqual <- "q48"
# use this version for 349 mitogenomes&COI_CYTB sequences
idxstatsgenomecovfolder <- paste0("outputs_PlatesEF_", samtoolsfilter, "_", samtoolsqual, "_minimap2_outputs_20190202_349MITOCOICYTB")  # this is the enclosing folder around the idxstats and genomcov files for a given set of soups
# outputs_PlatesEF_F2308_f0x2_q48_minimap2_outputs_20190202_349MITOCOICYTB
# this is where i store the outputs of this script
outputidxstatstabulatefolder <- "EF_outputs_20190202_F2308_f0x2_q48_minimap2_349MITOCOICYTB"
idxstatsfile <- paste0("*", samtoolsfilter, "_", samtoolsqual, "_sorted.bam_idxstats\\.txt")
genomecovfile <- paste0("*", samtoolsfilter, "_", samtoolsqual, "_sorted_genomecov_d\\.txt\\.gz")
samplemetadatafolder <- "~/Dropbox/Working_docs/Roslin_Greenland/2017/bulk_samples/ArcDyn_scripts/6_referenceseqs_metadata/PlatesEF_metadata"  # this is the enclosing folder around the sample metadata spreadsheet
samplemetadatafilename <- "Samples_for_sequencing_Zack_collection_Nov_2016_DY_TH_17_Feb_2017.xlsx"
lysisbufferfilename <- "lysis_buffer_EF.xlsx"  # this is based on Yinqiu's lysis buffer datasheet, which i edited a bit to make the sample names consistent so that tables could be joined via "Short_name_of_the_sample".  Also, i replaced missing data or cells with notes with NA
cat("idxstatsgenomecoverfolder is: ", idxstatsgenomecovfolder)
cat("idxstatsfile search pattern is: ", idxstatsfile)
# idx_files <- list.files(Sys.glob(file.path(idxstatsgenomecovfolder, "BWA??", folder2)), pattern = idxstatsfile, full.names = TRUE) # old version
idx_files <- list.files(Sys.glob(file.path(idxstatsgenomecovfolder)), pattern = idxstatsfile, full.names = TRUE)
head(idx_files); cat("    ", length(idx_files), "total files")
# column names of idx files
idx_cols <- c("mitogenome", "mt_length", "mapped_reads", "unmapped_reads")
# function to read_tsv the file and filename and pathname
loadFile1 <- function(x) {
# read in the four columns and store in df
df <- read_tsv(x,   # previously file.path(x)
col_names = idx_cols, na = "NA",
col_types = cols(
mitogenome = col_character(),
mt_length = col_integer(),
mapped_reads = col_integer(),
unmapped_reads = col_integer()
))
# read in filename, extract and sub in the first bit of the name, remove any filepaths (using basename) and store in df$sample.  example filename:
# PlateE_A1_AACCAACCG-GCCAAT_F2308_f0x2_q1_sorted.bam_idxstats.txt # PlatesEF
df$sample <- sub("(Plate[A-Z]_\\D\\d+)_[A-Z-]+-[A-Z]+_F[\\w]+_sorted.bam_idxstats.txt", "\\1", basename(x), perl=TRUE)
# [:alnum:] any alphanumeric character
# \\w any letter, digit, underscore
# \\D any non-digit, \\d any digit
df$well <- sub("Plate[A-Z]_(\\D\\d+)_[A-Z-]+-[A-Z]+_F[\\w]+_sorted.bam_idxstats.txt", "\\1", basename(x), perl=TRUE)
# extract well number from filename
# \\w any letter, digit, underscore
df$samtools_filter <- sub("Plate[A-Z]_\\D\\d+_[A-Z-]+-[A-Z]+_(F[\\w]+)_sorted.bam_idxstats.txt", "\\1", basename(x), perl=TRUE)
# extract samtools parameters from filename
df$pathname <- x
# store full pathname in df$pathname
# output is df
df
}
# lapply the loadFile() function to all of the idx_files, save the output in idx as a list
idx <- purrr::map(idx_files, loadFile1) # map is equivalent to lapply
# combine lists into a single dataframe (using do.call(rbind, idx)), reorder columns, delete unmapped_reads column, and remove rows that have "*" in the mitogenome field (the last line of each idxstats table)
idx <- do.call(rbind, idx) %>%
dplyr::select(mitogenome, mt_length, mapped_reads, sample, well, samtools_filter, pathname) %>%
dplyr::filter(mitogenome != "*")
# sanity checks
idx %>% distinct(well) %>% count()  # 96, number of distinct values of well, as a sanity check
idx %>% distinct(sample) %>% count()  # number of distinct values of sample:  192  I originally input 192
idx %>% distinct(pathname) %>% count()  # number of distinct values of sample:  192
idx %>% distinct(samtools_filter) %>% count() # number of distinct values of samtools_filter: should be 1
idx %>% distinct(samtools_filter) # should look something like:  F2308_f0x2_q1
idx_mitogenome_table <- idx %>% group_by(well) %>% distinct(mitogenome) %>% count() %>% arrange(desc(n)); View(idx_mitogenome_table) # should be 311 in all rows (308 mitogenomes + 3 COIspikes) or 409 (406 barcodes + 3 COI spikes)
idx_mitogenome_table <- idx %>% group_by(well) %>% distinct(mitogenome) %>% count() %>% arrange(desc(n)); View(idx_mitogenome_table) # should be 311 in all rows (308 mitogenomes + 3 COIspikes); 409 (406 barcodes + 3 COI spikes); 349mitoCOICYTB: all cols should be 352 (349 + 3)
length(idx$mitogenome) / idx_mitogenome_table[1,2] == idx %>% distinct(sample) %>% count()  # should evaluate to TRUE
samplemetadata <- read_excel(file.path(samplemetadatafolder, samplemetadatafilename), sheet = "edited", na = "NA")
# use tidyr::separate to parse out metadata from Full_name_of_the_sample
samplemetadata <- samplemetadata %>%
tidyr::separate(Full_name_of_the_sample, c("Date", "Plot", "Trap", "Week"), sep = "_", remove = FALSE)
# Warning message:
# Expected 4 pieces. Missing pieces filled with `NA` in 6 rows [187, 188, 189, 190, 191, 192].
# these are the mock samples
samplemetadata$Date <- as_date(ymd(samplemetadata$Date))
samplemetadata$Year <- year(samplemetadata$Date)
samplemetadata <- samplemetadata %>%
dplyr::select(Full_name_of_the_sample, Date, Year, Plot:Extraction_kit_protocol)
# use tidyr::unite to make Short_name_of_the_sample
samplemetadata <- samplemetadata %>%
tidyr::unite("Short_name_of_the_sample", c("Year", "Plot", "Trap", "Week"))
lysisbufferdata <- read_excel(file.path(samplemetadatafolder, lysisbufferfilename), sheet = "lysis_buffer_EF", na = "NA")
lysisbufferdata <- lysisbufferdata %>%
dplyr::mutate(lysis_buffer_orig_total_ul=lysis_buffer_orig_total_ml*1000)
lysisbufferdata <- lysisbufferdata %>%
dplyr::mutate(lysis_buffer_purified_ul=lysis_buffer_purified_ml*1000)
lysisbufferdata <- lysisbufferdata %>%
dplyr::select(Short_name_of_the_sample, lysis_buffer_orig_total_ul, lysis_buffer_purified_ul)
samplemetadata <- left_join(samplemetadata, lysisbufferdata) # R message: "Joining, by = "Short_name_of_the_sample""
samplemetadata <- samplemetadata %>%
dplyr::mutate(lysis_buffer_proportion=lysis_buffer_orig_total_ul/lysis_buffer_purified_ul)
samplemetadata$lysis_buffer_proportion <- round(samplemetadata$lysis_buffer_proportion, 2) # round to 2 decimal places
samplemetadata$sample <- str_c("Plate", substr(samplemetadata$ArcDyn_Plate_name, 1, 1), "_", samplemetadata$well)
# substr(samplemetadata$ArcDyn_Plate_name, 1, 1) # extract first character
# str_c # concatenate multiple strings into a single string
# alternative for substr is tidyr::str_sub(samplemetadata$ArcDyn_Plate_name, 1, 1)
idx_meta <- left_join(idx, samplemetadata) # R message:  "Joining, by = c("sample", "well")"
# use tidyr::separate to parse out metadata from Short_name_of_the_sample
idx_meta <- idx_meta %>%
tidyr::separate(Short_name_of_the_sample, c("Year", "Plot", "Trap", "Week"), sep = "_", remove = TRUE)
# sort columns, remove useless columns
idx_meta <- idx_meta %>%
dplyr::select(Date, Plot, Trap, Week, everything()) %>%
dplyr::select(-sample_reference, -species_name, -barcode_used, -Sample_type, -x.260_230_ratio, -x.260_280_ratio, -Quantification_method, -Buffer_used, -pathname, -Extraction_kit_protocol) %>%
dplyr::arrange(Date, Trap)
names(idx_meta)
#  [1] "Date"                       "Plot"                       "Trap"
#  [4] "Week"                       "mitogenome"                 "mt_length"
#  [7] "mapped_reads"               "sample"                     "well"
# [10] "samtools_filter"            "Full_name_of_the_sample"    "Year"
# [13] "Sample_alias"               "ArcDyn_Plate_name"          "EI_Plate_name"
# [16] "DNA_conc"                   "Concentration_ng_per_ul"    "Sample_volume_ul"
# [19] "lysis_buffer_orig_total_ul" "lysis_buffer_purified_ul"   "lysis_buffer_proportion"
idx_meta %>% distinct(Date) %>% count()  # number of distinct values of Date:  72
idx_meta %>% distinct(Plot) %>% count()  # number of distinct values of Plot:  2 because we also have the mocks
idx_meta %>% distinct(Trap) %>% count()  # number of distinct values of Trap:  should be 3 (A,B,C) but we also have the mocks
idx_meta %>% distinct(Week) %>% count()  # number of distinct values of Week:  16
idx_meta %>% distinct(mitogenome) %>% count()  # number of distinct values of mitogenome:  311 (308 mitogenomes + 3 COI_spike);  barcodes:  409 (406 + 3 COI spikes)
idx_meta %>% distinct(sample) %>% count()  # number of distinct values of sample:   192
idx_meta %>% distinct(sample) %>% count()  # number of distinct values of sample:   192
idx_meta %>% distinct(sample)
idx_meta %>% distinct(Sample_alias) %>% count()  # number of distinct values of Sample_alias:  should be = sample = 192
idx_meta %>% distinct(Sample_alias)
idx_meta %>% distinct(well) %>% count()  # number of distinct values of well:  96
idx_meta %>% distinct(ArcDyn_Plate_name) %>% count()  # number of distinct values of ArcDyn_Plate_name:  should be 2
idx_meta %>% distinct(samtools_filter) %>% count()  # number of distinct values of samtools_filter: should be 1
idx_meta %>% distinct(Full_name_of_the_sample) %>% count()  # number of distinct values of Full_name_of_the_sample: should be 192
idx_meta %>% distinct(Full_name_of_the_sample) %>% arrange(Full_name_of_the_sample) # number of distinct values of samtools_filter: should be 192
cat("Pattern search is for: ", genomecovfile)
genomecov_files <- list.files(Sys.glob(file.path(idxstatsgenomecovfolder)), pattern = genomecovfile, full.names = TRUE)
head(genomecov_files); cat("    ", length(genomecov_files), "total files")
# column names of genomecov_files
columnnames <- c("mitogenome", "position", "coverage")
# function to read_tsv the file
loadFile2 <- function(x) {
df <- read_tsv(gzfile(x),
# e.g. "minimap2_all_outputs_PlatesEF/PlateE_A1_AACCAACCG-GCCAAT_F2308_f0x2_q1_sorted_genomecov_d.txt.gz"
col_names = columnnames, na = "NA",
# col_types = cols(
#     mitogenome = col_character(),
#     position = col_integer(),
#     coverage = col_double()),
trim_ws = TRUE
)
# read in filename "basename(x)", extract the sample name "\\1" from  PlateE_A1_AACCAACCG-GCCAAT_F2308_f0x2_q1_sorted_genomecov_d.txt.gz, and place in df$sample column
df$sample <- sub("(Plate[A-Z]_\\D\\d+)_[A-Z-]+-[A-Z]+_F[\\w]+_sorted_genomecov_d.txt.gz", "\\1", basename(x), perl=TRUE)
# \\w any letter, digit, underscore
# \\D any non-digit, \\d any digit
df$well <- sub("Plate[A-Z]_(\\D\\d+)_[A-Z-]+-[A-Z]+_F[\\w]+_sorted_genomecov_d.txt.gz", "\\1", basename(x), perl=TRUE)
# extract well number from filename
# \\w any letter, digit, underscore
# \\D any non-digit, \\d any digit
df$samtools_filter <- sub("Plate[A-Z]_\\D\\d+_[A-Z-]+-[A-Z]+_(F[\\w]+)_sorted_genomecov_d.txt.gz", "\\1", basename(x), perl=TRUE)
# extract samtools parameters from filename
df$pathname_genomecov <- x
# store full pathname in df$pathname
df <- df %>% dplyr::group_by(mitogenome) %>%
summarise(sum_coverage = sum(coverage),
mean_coverage = mean(coverage),
stddev = sd(coverage),
coefvar = sd(coverage)/mean(coverage),
length = n(),
pct_coverage = sum(coverage>0)/n(), # % of positions that have 1 or more reads mapped
sample = first(sample),
well = first(well),
samtools_filter = first(samtools_filter),
pathname_genomecov = first(pathname_genomecov)
)
# output is df
df
}
# this step requires ~30 minutes to run for mitogenomes, ~ 2 mins for barcodes
# lapply the loadFile2() function to all of the genomecov_files, save the output in genomecovfiles as a list
# map is equivalent to lapply
genomecoverages_summ <- purrr::map(genomecov_files, loadFile2); notify("Your loadfile2 function has finally finished!", "Message from R", speakIt=TRUE)
# rbind the list into a dataframe
genomecoverages_summ <- do.call(rbind, genomecoverages_summ)
# TIME SAVING STEP  After running once for mitogenomes and for barcodes, i save the file to avoid having to rerun the map() step
# mitogenomes
# genomecoverages_summ <- readRDS(file.path(outputidxstatstabulatefolder, "genomecoverages_summ_PlatesEF_20190115_308mitogenomes.RDS"))
# barcodes
# genomecoverages_summ <- readRDS(file.path(outputidxstatstabulatefolder, "genomecoverages_summ_PlatesEF_20190116_406barcodes.RDS"))
genomecoverages_summ <- readRDS(file.path(outputidxstatstabulatefolder, "genomecoverages_summ_PlatesEF_20190202_349MITOCOICYTB.RDS"), compress = TRUE)
# the commands used to save the genomecov files
# saveRDS(file.path(genomecoverages_summ, file.path(outputidxstatstabulatefolder, "genomecoverages_summ_PlatesEF_20190115_308mitogenomes.RDS"), compress = TRUE)
# saveRDS(file.path(genomecoverages_summ, file.path(outputidxstatstabulatefolder, "genomecoverages_summ_PlatesEF_20190116_406barcodes.RDS"), compress = TRUE)
saveRDS(genomecoverages_summ, file.path(outputidxstatstabulatefolder, "genomecoverages_summ_PlatesEF_20190202_349MITOCOICYTB.RDS"), compress = TRUE)
# left_join genomecoverages_summ to idx_meta
idx_meta_genomecov <- left_join(idx_meta, genomecoverages_summ) # R message:  Joining, by = c("mitogenome", "sample", "well", "samtools_filter")
idx_meta_genomecov <- idx_meta_genomecov %>% arrange(Date, Trap)
# use grepl() to find mitogenome names that are COI spike names
idx_meta_genomecov$COI_Species <- if_else(grepl("_COI$", idx_meta_genomecov$mitogenome), "COI_Spike", "ArcDyn_Species") # this regex works for both the mitogenome and barcode datasets
# reorder the columns for convenience
idx_meta_genomecov <- idx_meta_genomecov %>%
dplyr::select(Date:mitogenome, COI_Species, mapped_reads, everything())
# change the names of the spikes from an old naming convention to the one that we want to use
# must do this at this stage, after joining idxstats and genomecov files
idx_meta_genomecov <-  idx_meta_genomecov %>%
mutate(
mitogenome = case_when(
mitogenome == "1-2_Lepidoptera_Bombycidae_Bombyx_mori_10ng_COI" ~  "Lepidoptera_Bombycidae_Bombyx_mori_COI",
mitogenome == "1-2_Lepidoptera_Bombycidae_Bombyx_mori_COI" ~ "Lepidoptera_Bombycidae_Bombyx_mori_COI",
mitogenome == "3-1_Coleoptera_Mordellidae_20ng_COI" ~ "Coleoptera_Mordellidae_COI",
mitogenome == "3-1_Coleoptera_Mordellidae_COI" ~ "Coleoptera_Mordellidae_COI",
mitogenome == "2-1_Coleoptera_Elateridae_40ng_COI" ~ "Coleoptera_Elateridae_COI",
mitogenome == "2-1_Coleoptera_Elateridae_COI" ~ "Coleoptera_Elateridae_COI",
TRUE ~ as.character(mitogenome)
)
)
names(idx_meta_genomecov)
rm(genomecoverages_summ)
rm(idx)
rm(idx_meta)
rm(idx_mitogenome_table)
rm(lysisbufferdata)
rm(samplemetadata)
# calculate sum of all COI spike reads for each sample.
sum_idx_meta_genomecov <- idx_meta_genomecov %>%
group_by(Full_name_of_the_sample, COI_Species) %>%
summarise_at(vars(mapped_reads), funs(sum(as.numeric(.)))) %>%
arrange(desc(COI_Species), mapped_reads, Full_name_of_the_sample)
View(sum_idx_meta_genomecov)
# visual inspection reveals 1 sample that has very few COI_spike mapped reads (8). Remove it
sample_names <- sum_idx_meta_genomecov %>%
dplyr::filter(COI_Species == "COI_Spike" && mapped_reads < 200) %>%
dplyr::select(Full_name_of_the_sample) %>%
distinct(Full_name_of_the_sample)
samples_to_remove <- sample_names %>%
dplyr::pull(Full_name_of_the_sample) # pull out a single variable
samples_to_remove # 1 sample to remove
# [1] "2009Jun17_Art3_TrapB_Wk25"
idx_meta_genomecov <- idx_meta_genomecov %>%
filter(!Full_name_of_the_sample %in% samples_to_remove) # 59401 obs mitogenomes, 65849 obs barcodes
# sanity check:  191 samples, which is correct since i removed 1 sample
idx_meta_genomecov %>%
distinct(Full_name_of_the_sample) %>%
count()  # number of distinct values of Full_name_of_the_sample
# confirm that mock and environmental samples are in the dataset
idx_meta_genomecov %>%
distinct(Plot) %>%
arrange(Plot) # distinct values of Plot: should be 2 (Art3, evenDNA). Art3 is the name of the Zackenberg plot, and evenDNA is the name of the mock even samples
# mock data table
mocks_idx_meta_genomecov <- idx_meta_genomecov %>%
dplyr::filter(!Plot == "Art3")
# remove mock soup data from idx_meta_genomecov
idx_meta_genomecov <- idx_meta_genomecov %>%
dplyr::filter(Plot == "Art3")
# create variable from Date and Trap(ABC)
# stringr::str_pad(x, width = 2, side = "left", pad = "0")  # to ensure that the date always has two digits, e.g. 07.
idx_meta_genomecov$DateTrap <- str_c("Date", year(idx_meta_genomecov$Date), str_pad(month(idx_meta_genomecov$Date), 2, side = "left", pad = "0"), str_pad(day(idx_meta_genomecov$Date), 2, side = "left", pad = "0"), idx_meta_genomecov$Trap, sep = "_")
idx_meta_genomecov <- idx_meta_genomecov %>% select(DateTrap, everything())
# in coefvar column, replace "NaN" string to "NA" and then coerce column back to numeric
idx_meta_genomecov$coefvar <- idx_meta_genomecov$coefvar %>%  str_replace("NaN", "NA") %>% as.numeric()
# these tables check that i only have one row for each Full_name_of_the_sample, DateTrap, and mitogenome
# ideally, there should be a 1 in all rows of column "n"
idxstats_by_Full_name_of_the_sample <- idx_meta_genomecov %>%
dplyr::group_by(DateTrap) %>%
dplyr::distinct(Full_name_of_the_sample) %>%
dplyr::count() %>%
dplyr::arrange(desc(n)); View(idxstats_by_Full_name_of_the_sample)
# ideally, there should be a 1 in all rows of column "n"
idxstats_by_DateTrap <- idx_meta_genomecov %>%
dplyr::group_by(Full_name_of_the_sample) %>%
dplyr::distinct(DateTrap) %>%
dplyr::count() %>%
dplyr::arrange(desc(n)); View(idxstats_by_DateTrap)
# ideally, there should be a 311 or 409 in all rows of column "n"
idxstats_by_mitogenome <- idx_meta_genomecov %>%
dplyr::group_by(Full_name_of_the_sample) %>%
dplyr::distinct(mitogenome) %>%
dplyr::count() %>%
dplyr::arrange(desc(n)); View(idxstats_by_mitogenome)
# save idx_meta_genomecov files
# write_tsv(idx_meta_genomecov, file.path(outputidxstatstabulatefolder, "idx_meta_genomecov_PlatesEF_20190115_308mitogenomes.txt")) # output file for merging with the other RUN outputs
# write_tsv(idx_meta_genomecov, file.path(outputidxstatstabulatefolder, "idx_meta_genomecov_PlatesEF_20190116_406barcodes.txt")) # output file for merging with the other RUN outputs
write_tsv(idx_meta_genomecov, file.path(outputidxstatstabulatefolder, "idx_meta_genomecov_PlatesEF_20190202_349MITOCOICYTB.txt")) # output file for merging with the other RUN outputs
# create columns
mocks_idx_meta_genomecov$plate <- "PlateEF"
# create experiment column
mocks_idx_meta_genomecov <- mocks_idx_meta_genomecov %>%
mutate(
experiment = case_when(
Sample_alias == "ME50_1" | Sample_alias == "ME50_2" | Sample_alias == "ME100_1" | Sample_alias == "ME100_2" | Sample_alias == "ME200_1" | Sample_alias == "ME200_2" ~ "mockeven",
Sample_alias == "MG_1" | Sample_alias == "MG_2" | Sample_alias == "MG_3" ~ "mockgradient",
Sample_alias == "COI_1_negative_control" | Sample_alias == "COI_2_negative_control" ~ "negctrl"
)
)
# rename sample column to plate_well, because otherwise i lose this column in the next step
mocks_idx_meta_genomecov <- mocks_idx_meta_genomecov %>%
rename(plate_well = sample)  # orig colname is sample
# create sample column
mocks_idx_meta_genomecov <- mocks_idx_meta_genomecov %>%
tidyr::unite("sample", c("plate", "Sample_alias"), sep = "_")
# create plate, input_amount, run columns from Sample_alias column:  PlateEF_ME100_1
mocks_idx_meta_genomecov <- mocks_idx_meta_genomecov %>%
tidyr::separate(sample, c("plate", "input_amount", "run"), sep = "_", remove = FALSE, convert = TRUE)
# # remove ME substring from input_amount column and convert type to numeric
mocks_idx_meta_genomecov <- mocks_idx_meta_genomecov %>%
mutate_at("input_amount", str_remove, "M[E,G]") %>% # remove ME or MG
hablar::convert(num(input_amount))
# select and rename columns
mocks_idx_meta_genomecov <- mocks_idx_meta_genomecov %>%
dplyr::select(sample, plate, experiment, run, mitogenome, PC = pct_coverage, mapped_reads, input_amount, plate_well)
names(mocks_idx_meta_genomecov)
# write_tsv(mocks_idx_meta_genomecov, file.path(outputidxstatstabulatefolder, "mocks_idx_meta_genomecov_PlatesEF_20190115_308mitogenomes.txt")) # for merger with mock file from PlatesGH
# write_tsv(mocks_idx_meta_genomecov, file.path(outputidxstatstabulatefolder, "mocks_idx_meta_genomecov_PlatesEF_20190116_406barcodes.txt")) # for merger with mock file from PlatesGH
write_tsv(mocks_idx_meta_genomecov, file.path(outputidxstatstabulatefolder, "mocks_idx_meta_genomecov_PlatesEF_20190202_349MITOCOICYTB.txt")) # for merger with mock file from PlatesGH
