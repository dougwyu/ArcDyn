system.time({ x <- matrix(rnorm(d^2),d,d); solve(x) })
system.time({ x <- matrix(rnorm(d^2),d,d); solve(x) })
system.time({ x <- matrix(rnorm(d^2),d,d); solve(x) })
# vecLib
system.time({ x <- matrix(rnorm(d^2),d,d); tcrossprod(x) })
rm(x)
colourpicker:::colourPickerAddin()
colourpicker:::plotHelperAddin()
CPCOLS <- c("#1f78b4", "#33a02c", "#e31a1c")
library(ggplot2)
ggplot(iris, aes(Sepal.Length, Petal.Length)) +
geom_point(aes(col = Species)) +
scale_colour_manual(values = CPCOLS)
reprex:::reprex_addin()
# vecLib
system.time({ x <- matrix(rnorm(d^2),d,d); tcrossprod(x) })
system.time({ x <- matrix(rnorm(d^2),d,d); solve(x) })
rm(x)
bookdown:::mathquill()
addinexamples:::subsetAddin()
install.packages("roperators")
)&//6ǯ!"31,,)0ǰ
library(devtools)
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
data(reedfrogs)
d <- reedfrogs
str(d)
str(d)
install.packages("hablar")
install.packages("arsenal")
library("hablar", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("arsenal", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
data(mockstudy)
# retain NAs when creating the table using the useNA argument
tab.ex <- table(mockstudy[, c("arm", "sex", "mdquality.s")], useNA = "ifany")
View(mockstudy)
# retain NAs when creating the table using the useNA argument
tab.ex <- arsenal::table(mockstudy[, c("arm", "sex", "mdquality.s")], useNA = "ifany")
noby <- freqlist(tab.ex)
View(noby)
View(noby[["freqlist"]])
str(noby)
summary(noby)
summary(freqlist(tab.ex),
labelTranslations = c("Treatment Arm", "Gender", "LASA QOL"))
library(gapminder)
gapminder
gapminder %>%
convert(chr(country))
library(magrittr)
gapminder
gapminder %>%
convert(chr(country))
gapminder %>%
convert(chr(country,
continent),
int(lifeExp),
dbl(pop),
num(gdpPercap))
tibble(dates = c(12818, 13891),
sunny = c("yes", "no")) %>%
convert(dte(dates, .args = list(origin = "1900-01-01")))
library(tibble)
tibble(dates = c(12818, 13891),
sunny = c("yes", "no")) %>%
convert(dte(dates, .args = list(origin = "1900-01-01")))
install.packages("harmonicmeanp")
library(tidyverse)
library(ggthemes)
# library(cowplot)
# library(ggbeeswarm)
# This package
# library(devtools)
# devtools::install_github("r-lib/here")
# source("https://install-github.me/gaborcsardi/notifier")
export CC=/usr/local/bin/gcc;CXX=/usr/local/bin/g++;MPICXX=/usr/local/bin/mpicxx
export CC=/usr/local/bin/gcc
devtools::install_github("alexpghayes/hayeslib")
library(here)
devtools::load_all(here::here())
devtools::install_github("alexpghayes/hayeslib")
tb <- tibble(
Taxon = c("T1", "T2", "T3"),
Bias = c(1, 18, 6),
S1 = c(1, 1, 1),
S2 = c(1, 1/15, 4/15),
S3 = c(1, 4/15, 1/15),
)
print(tb)
tb <- tibble(
Taxon = c("T1", "T2", "T3"),
Bias = c(1, 18, 6),
S1 = c(1, 1, 1),
S2 = c(1, 1/15, 4/15),
S3 = c(1, 4/15, 1/15),
)
print(tb)
here()
dr_here()
fig_path <- file.path(here::here(), "figures")
# library(here)
devtools::load_all(here::here()) # devtools version of library(here)
# install package: alexpghayes/hayeslib, is compiled and requires gcc, not LLVM
# export CC=/usr/local/bin/gcc
# export CC=/usr/local/bin/gcc;CXX=/usr/local/bin/g++;MPICXX=/usr/local/bin/mpicxx
devtools::install_github("alexpghayes/hayeslib")
# install package: alexpghayes/hayeslib, is compiled and requires gcc, not LLVM
# export CC=/usr/local/bin/gcc
# export CC=/usr/local/bin/gcc;CXX=/usr/local/bin/g++;MPICXX=/usr/local/bin/mpicxx
devtools::install_github("alexpghayes/hayeslib")
# install package: alexpghayes/hayeslib, is compiled and requires gcc, not LLVM
# export CC=/usr/local/bin/gcc
# export CC=/usr/local/bin/gcc;CXX=/usr/local/bin/g++;MPICXX=/usr/local/bin/mpicxx
devtools::install_github("alexpghayes/hayeslib")
# install package: alexpghayes/hayeslib, is compiled and requires gcc, not LLVM
# export CC=/usr/local/bin/gcc
# export CC=/usr/local/bin/gcc;CXX=/usr/local/bin/g++;MPICXX=/usr/local/bin/mpicxx
devtools::install_github("alexpghayes/hayeslib")
# install package: alexpghayes/hayeslib, is compiled and requires gcc, not LLVM
# export CC=/usr/local/bin/gcc
# export CC=/usr/local/bin/gcc;CXX=/usr/local/bin/g++;MPICXX=/usr/local/bin/mpicxx
devtools::install_github("alexpghayes/hayeslib")
# http://thecoatlessprofessor.com/programming/openmp-in-r-on-os-x/#gui-clang4
# https://cran.r-project.org # download and install gfortran 6.1 and clang 6.0.0
# https://daijiang.name/en/2017/06/21/fopenmp-option-of-clang-error/
devtools::install_github("alexpghayes/hayeslib")
# http://thecoatlessprofessor.com/programming/openmp-in-r-on-os-x/#gui-clang4
# https://cran.r-project.org # download and install gfortran 6.1 and clang 6.0.0
# https://daijiang.name/en/2017/06/21/fopenmp-option-of-clang-error/
devtools::install_github("alexpghayes/hayeslib")
clang++
install.packages(c("caTools", "corrr", "DHARMa", "formatR", "ggforce", "lme4", "multcomp", "mvtnorm", "network", "proxy", "registry", "rmutil", "XML"))
remotes::install_github("ropensci/bold@async")
install.packages("interactions")
install.packages(c("geometry", "rJava", "rlang"))
colourpicker:::colourPickerAddin()
colourpicker:::plotHelperAddin()
colourpicker:::colourPickerAddin()
questionr:::icut()
questionr:::iorder()
addinexamples:::subsetAddin()
df <- data.frame(
x = 1:3,
y = c("a", "d,e,f", "g,h"),
z = c("1", "2,3,4", "5,6"),
stringsAsFactors = FALSE
)
View(df)
separate_rows(df, y, z, convert = TRUE)
library(tidyr)
separate_rows(df, y, z, convert = TRUE)
library(dplyr)
df <- data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e"))
View(df)
df %>% extract(x, "A")
df %>% extract(x, c("A", "B"), "([[:alnum:]]+)-([[:alnum:]]+)")
# If no match, NA:
df %>% extract(x, c("A", "B"), "([a-d]+)-([a-d]+)")
df <- tibble::tibble(x = c("a", "b"), n = c(1, 2))
View(df)
uncount(df, n)
uncount(df, n, .id = "id")
# You can also use constants
uncount(df, 2)
# Or expressions
uncount(df, 2 / n)
uncount(df, n)
df <- tibble::tibble(x = c("a", "b"), n = c(1, 2))
df
uncount(df, n)
uncount(df, n, .id = "id")
# You can also use constants
uncount(df, 2)
# Or expressions
uncount(df, 2 / n)
library(dplyr, warn.conflicts = FALSE)
df <- tibble(
group = c(1:2, 1),
item_id = c(1:2, 2),
item_name = c("a", "b", "b"),
value1 = 1:3,
value2 = 4:6
)
df
df %>% complete(group, nesting(item_id, item_name))
install.packages(c("geometry", "rJava", "rlang", "survival"))
install.packages(c("geometry", "rJava", "rlang", "survival"))
install.packages("rJava")
expr(mean(1:10 * 2))
quo(mean(1:10 * 2))
library(rlang)
expr(mean(1:10 * 2))
quo(mean(1:10 * 2))
library(lobstr)
install.packages("lobstr")
library(rlang)
library(lobstr)
expr(mean(1:10 * 2))
quo(mean(1:10 * 2))
df <- data.frame(runif(3), runif(3))
names(df) <- c(1, 2)
View(df)
df$3 <- df$1 + df$2
df$three <- df$1 + df$2
df$three <- (df$1 + df$2)
x <- c(1,2,3)
obj_addr(x)
y <- x
obj_addr(y)
a <- 1:10
b <- a
obj_addr(a)
obj_addr(b)
c <- b
obj_addr(c)
obj_addr(d)
d <- 1:10
obj_addr(d)
mean
base::mean
get("mean")
evalq(mean)
obj_addr(mean)
obj_addr(base::mean)
obj_addr(get("mean"))
obj_addr(evalq(mean))
obj_addr(match.fun("mean"))
install.packages(c("MASS", "rJava"))
install.packages(c("MASS", "survival"))
fruit <- c("apple", "banana", "pear", "pinapple")
fruit
str_detect(fruit, "a")
library(stringr)
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "[aeiou]")
library(dplyr)
library(tidyr)
unite_(mtcars, "vs_am", c("vs","am"))
mtcars
unite(mtcars, "unitedvsam", c("vs","am"))
separate(mtcars, "unitedvsam")
mtcarsunited <- unite(mtcars, "unitedvsam", c("vs","am"))
mtcarsunited
separate(mtcarsunited, "unitedvsam")
separate(mtcarsunited, "unitedvsam",c("vs", "am"))
# Separate is the complement of unite
mtcars %>%
unite("vs_am", vs, am) %>%
separate(vs_am, c("vs", "am"))
# Separate is the complement of unite
mtcars %>%
unite("vs_am", vs, am) #%>%
# Separate is the complement of unite
mtcars %>%
unite("vs_am", vs, am) %>%
separate(vs_am, c("vs", "am"))
mainDir = "~/Dropbox/Working_docs/Kelpie/data_20190419/"
filename = "Kelpie_input_species_20190419.RData"
load(file.path(mainDir, filename))
View(mockdf)
View(mockdf)
library(tidyverse)
library(lubridate)
library(readr)
library(arsenal)
setwd("~/Dropbox/Working_docs/Roslin_Greenland/2017/bulk_samples/ArcDyn_scripts/7_ecological_analysis/Rdata")
load("input_data_step5_20190204.RData")
# mock soup datasets
mockdf <- left_join(mock_design, species, by = c("input_sp" = "sp")) %>%
select(sample, experiment, run, input_amount, Order, Family, Genus, Species_BOLD, mitogenome) %>%
filter(experiment != "negctrl" & run == 2 & str_starts(sample, "PlateGH")) %>%
mutate(
Species_BOLD = case_when(
input_amount == 0.2 ~ "Lepidoptera_Bombycidae_Bombyx_mori_COI_SPIKE_0.2",
input_amount == 0.4 ~ "Coleoptera_Mordellidae_COI_SPIKE_0.4",
input_amount == 0.8 ~ "Coleoptera_Elateridae_COI_SPIKE_0.8",
TRUE ~ as.character(Species_BOLD)
)
) %>%
select(-run) %>%
arrange(sample, desc(input_amount)) %>%
mutate(
sample = str_remove(sample, "_2")
)
View(mockdf)
# environmental datasets
mergedf <- left_join(env_data_mitogenome, env_design)
mergedf <- left_join(mergedf, species)
mergedf <- mergedf %>% filter(run == "idx_meta_genomecov_GH")
mergedf <- mergedf %>% select(sample, COI, everything())
mergesumm <- function(x) {
df <- mergedf %>%
filter(year(date) == x) %>%
mutate(
COI = case_when(
sp == "spike1" ~ "Lepidoptera_Bombycidae_Bombyx_mori_COI_SPIKE_0.2",
sp == "spike2" ~ "Coleoptera_Mordellidae_COI_SPIKE_0.4",
sp == "spike3" ~ "Coleoptera_Elateridae_COI_SPIKE_0.8",
TRUE ~ as.character(COI)
)
) %>%
mutate(
PC = case_when(
str_starts(sp, "spike") == TRUE ~ 1.0,
TRUE ~ as.numeric(PC)
)
) %>%
group_by(COI) %>%
summarise(
max_PC = max(PC),
sum_mapped_reads=sum(mapped_reads),
Order = first(Order),
Family = first(Family),
Genus = first(Genus),
Species_BOLD = first(Species_BOLD),
mitogenome = first(mitogenome)
) %>%
arrange(desc(sum_mapped_reads))
df
}
mergedf2003 <- mergesumm(2003)
mergedf2004 <- mergesumm(2004)
mergedf2005 <- mergesumm(2005)
mainDir = "~/Dropbox/Working_docs/Kelpie/data_20190419/"
filename = "Kelpie_input_species_20190419.RData"
if(file_test("-f", file.path(mainDir, filename))) {  # test if file already exists "-f"
stop("File can't be saved because a file with that name already exists.")
} else {
save(mockdf, mergedf2003, mergedf2004, mergedf2005, file = file.path(mainDir, filename))
}
if(file_test("-f", file.path(mainDir, filename))) {  # test if file already exists "-f"
stop("File can't be saved because a file with that name already exists.")
} else {
save(mockdf, mergedf2003, mergedf2004, mergedf2005, file = file.path(mainDir, filename))
}
View(mockdf)
View(mergedf2003)
View(mergedf2004)
View(mergedf2005)
View(mockdf)
load("/Users/Negorashi2011/Dropbox/Working_docs/Kelpie/data_20190419/Kelpie_input_species_20190419.RData")
View(mockdf)
View(mergedf2003)
install.packages(c("clipr", "labelled"))
library(labelled)
iris
data(iris)
iris <- data(iris)
iris <- tibble(iris)
View(iris)
iris <- tibble(data(iris))
rm(iris)
require(iris)
iris
var_label(iris$Sepal.Length) <- "Length of sepal"
View(iris)
library(labelled)
setwd("~/Dropbox/Working_docs/Roslin_Greenland/2017/bulk_samples/ArcDyn_scripts/7_ecological_analysis/Rdata")
load("input_data_step5_20190204.RData")
# mock soup datasets
mockdf <- left_join(mock_design, species, by = c("input_sp" = "sp")) %>%
select(sample, experiment, run, input_amount, Order, Family, Genus, Species_BOLD, mitogenome) %>%
filter(experiment != "negctrl" & run == 2 & str_starts(sample, "PlateGH")) %>%
mutate(
Species_BOLD = case_when(
input_amount == 0.2 ~ "Lepidoptera_Bombycidae_Bombyx_mori_COI_SPIKE_0.2",
input_amount == 0.4 ~ "Coleoptera_Mordellidae_COI_SPIKE_0.4",
input_amount == 0.8 ~ "Coleoptera_Elateridae_COI_SPIKE_0.8",
TRUE ~ as.character(Species_BOLD)
)
) %>%
select(-run) %>%
arrange(sample, desc(input_amount)) %>%
mutate(
sample = str_remove(sample, "_2")
)
# environmental datasets
mergedf <- left_join(env_data_mitogenome, env_design)
mergedf <- left_join(mergedf, species)
mergedf <- mergedf %>% filter(run == "idx_meta_genomecov_GH")
mergedf <- mergedf %>% select(sample, COI, everything())
mergesumm <- function(x) {
df <- mergedf %>%
filter(year(date) == x) %>%
mutate(
COI = case_when(
sp == "spike1" ~ "Lepidoptera_Bombycidae_Bombyx_mori_COI_SPIKE_0.2",
sp == "spike2" ~ "Coleoptera_Mordellidae_COI_SPIKE_0.4",
sp == "spike3" ~ "Coleoptera_Elateridae_COI_SPIKE_0.8",
TRUE ~ as.character(COI)
)
) %>%
mutate(
PC = case_when(
str_starts(sp, "spike") == TRUE ~ 1.0,
TRUE ~ as.numeric(PC)
)
) %>%
group_by(COI) %>%
summarise(
max_PC = max(PC),
sum_mapped_reads=sum(mapped_reads),
Order = first(Order),
Family = first(Family),
Genus = first(Genus),
Species_BOLD = first(Species_BOLD),
mitogenome = first(mitogenome)
) %>%
arrange(desc(sum_mapped_reads))
df
}
mergedf2003 <- mergesumm(2003)
mergedf2004 <- mergesumm(2004)
mergedf2005 <- mergesumm(2005)
View(mockdf)
mockdftest <- mockdf %>%
set_variable_labels(input_amount = "ng")
View(mockdftest)
View(mockdf)
View(mockdf)
View(mock_data_COI)
View(mergedf2003)
mergesumm <- function(x) {
df <- mergedf %>%
filter(year(date) == x) %>%
mutate(
COI = case_when(
sp == "spike1" ~ "Lepidoptera_Bombycidae_Bombyx_mori_COI_SPIKE_0.2",
sp == "spike2" ~ "Coleoptera_Mordellidae_COI_SPIKE_0.4",
sp == "spike3" ~ "Coleoptera_Elateridae_COI_SPIKE_0.8",
TRUE ~ as.character(COI)
)
) %>%
mutate(
PC = case_when(
str_starts(sp, "spike") == TRUE ~ 1.0,
TRUE ~ as.numeric(PC)
)
) %>%
group_by(COI) %>%
summarise(
max_PC = max(PC),
sum_mapped_reads=sum(mapped_reads),
Order = first(Order),
Family = first(Family),
Genus = first(Genus),
Species_BOLD = first(Species_BOLD),
mitogenome = first(mitogenome)
) %>%
arrange(desc(sum_mapped_reads)) %>%
labelled::set_variable_labels(COI = "barcode seq name", PC = "% cov mapped to seq", sum_mapped_reads = "measure of DNA biomass")
df
}
mergedf2003 <- mergesumm(2003)
mergedf2004 <- mergesumm(2004)
function (.data, ..., .labels = NA)
mergesumm <- function(x) {
df <- mergedf %>%
filter(year(date) == x) %>%
mutate(
COI = case_when(
sp == "spike1" ~ "Lepidoptera_Bombycidae_Bombyx_mori_COI_SPIKE_0.2",
sp == "spike2" ~ "Coleoptera_Mordellidae_COI_SPIKE_0.4",
sp == "spike3" ~ "Coleoptera_Elateridae_COI_SPIKE_0.8",
TRUE ~ as.character(COI)
)
) %>%
mutate(
PC = case_when(
str_starts(sp, "spike") == TRUE ~ 1.0,
TRUE ~ as.numeric(PC)
)
) %>%
group_by(COI) %>%
summarise(
max_PC = max(PC),
sum_mapped_reads=sum(mapped_reads),
Order = first(Order),
Family = first(Family),
Genus = first(Genus),
Species_BOLD = first(Species_BOLD),
mitogenome = first(mitogenome)
) %>%
arrange(desc(sum_mapped_reads)) %>%
labelled::set_variable_labels(COI = "barcode seq name", max_PC = "% cov mapped to seq", sum_mapped_reads = "measure of DNA biomass")
df
}
mergedf2003 <- mergesumm(2003)
mergedf2004 <- mergesumm(2004)
mergedf2005 <- mergesumm(2005)
View(mergedf2003)
mainDir = "~/Dropbox/Working_docs/Kelpie/data_20190419/"
filename = "Kelpie_input_species_20190419.RData"
filename = "Kelpie_input_species_20190420.RData"
if(file_test("-f", file.path(mainDir, filename))) {  # test if file already exists "-f"
stop("File can't be saved because a file with that name already exists.")
} else {
save(mockdf, mergedf2003, mergedf2004, mergedf2005, file = file.path(mainDir, filename))
}
mainDir = "~/Dropbox/Working_docs/Kelpie/data_20190419/"
filename = "Kelpie_input_species_20190420.RData"
if(file_test("-f", file.path(mainDir, filename))) {  # test if file already exists "-f"
stop("File can't be saved because a file with that name already exists.")
} else {
save(mockdf, mergedf2003, mergedf2004, mergedf2005, file = file.path(mainDir, filename))
}
